import cv2
import numpy as np

def convolve_image(image, kernel):
    result = np.zeros_like(image)
    for i in range(image.shape[2]):
        result[:, :, i] = convolve(image[:, :, i], kernel)
        return result

def convolve(image, kernel):
    img_h, img_w = image.shape
    kernel_h, kernel_w = kernel.shape    
    pad_h = kernel_h // 2
    pad_w = kernel_w // 2
    padded_img = np.pad(image, ((pad_h, pad_h), (pad_w, pad_w)), mode='reflect')
    output = np.zeros((img_h, img_w))
    for i in range(img_h):
        for j in range(img_w):
            element = padded_img[i:i+kernel_h, j:j+kernel_w]
            output[i, j] = np.sum(element * kernel)
    return output

def box_filter(size):
    return np.ones((size, size)) / (size * size)

def sobel_filter(img):
    sobel_x = np.array([[-1, 0, 1],
                        [-2, 0, 2],
                        [-1, 0, 1]])
    sobel_y = np.array([[-1, -2, -1],
                        [ 0,  0,  0],
                        [ 1,  2,  1]])
    output_x = convolve_image(img, sobel_x)
    output_y = convolve_image(img, sobel_y)
    filtered_img = np.sqrt(output_x**2 + output_y**2)
    return filtered_img    

def test_filters(image_path):
    test_img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    sobeled_img = sobel_filter(test_img)
    box_result = convolve_image(test_img, box_filter)
   
    cv2.imshow('Original Image', test_img)
    cv2.imshow('Box Filter (5x5)', box_result)
    cv2.imshow("sobeled image", sobeled_img)

    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    test_filters('image.jpg')
